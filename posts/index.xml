<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ramblings on Computer Science</title><link>http://mariari.github.io/posts/</link><description>Recent content in Posts on Ramblings on Computer Science</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 30 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://mariari.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>On Benchmarking Zero Knowledge Proof Systems</title><link>http://mariari.github.io/posts/bencmarking-zkp-systems/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>http://mariari.github.io/posts/bencmarking-zkp-systems/</guid><description>In the Zero Knowledge sphere, there exists a plethora of Zero Knowledge Systems and languages. From zk-SNARK languages like Zokrates, Leo, and Vamp-IR; to STARK machines like Triton VM, Miden VM, and RISC Zero. It is difficult in the current landscape to make an informed decision about which system fits their use case best. This benchmarking endeavor seeks to alleviate these issues by readily making performance numbers between the various systems be known and provide an easy way to compare the same program across languages and systems.</description></item><item><title>The Berlin Pipeline</title><link>http://mariari.github.io/posts/the-berlin-pipeline/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>http://mariari.github.io/posts/the-berlin-pipeline/</guid><description>The Berlin Pipeline was originally an architecture proposal for a compiler project written in the ML style. Which is to say the compiler is written as a series of passes and layers from the frontend language all the way down to the backend. With that said, The Berlin Pipeline should be of interest to compiler writers regardless of backgrounds and can be applied to any compiler that:
Has complex pipelining Can not be self hosted.</description></item></channel></rss>